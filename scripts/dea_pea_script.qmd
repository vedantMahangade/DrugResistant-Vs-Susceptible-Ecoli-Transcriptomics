---
title: "Escherichia Coli Differerntial Gene Expression and Pathway Analysis"
format: html
editor: visual
---

## Packages

```{r}
library(ggplot2)
library(pheatmap)
library(tidyverse)
library(Tweedieverse)
library(EnhancedVolcano)
library(dplyr)
library(RColorBrewer) 
library(VennDiagram)
library(ComplexUpset)

library(clusterProfiler)
library(org.EcK12.eg.db)
library(enrichplot)
library(DOSE)
```

```{r setup, include=FALSE}
library(knitr)
opts_knit$set(root.dir="~/DrugResistant-Vs-Susceptible-Ecoli-Transcriptomics-main/") # file paths are relative to the root of the project directory
```

## Data

```{r}
# # Set working directory
# setwd("~/DrugResistant-Vs-Susceptible-Ecoli-Transcriptomics-main")

# GEO file includes metadata prefixed with !
# comment.char = "!" skips those lines
geo_data <- read.delim(
  "data/GSE59408_series_matrix.txt", 
  comment.char = "!", 
  header = TRUE, 
  row.names = 1, 
  check.names = FALSE
)


# Converting to matrix
expr_matrix <- as.matrix(geo_data)
```

```{r}
head(geo_data)
```

```{r}
# Create Sample Metadata
sample_names <- c(
  "Parent_strain_rep1", "Parent_strain_rep2",
  "Cefoperazone_CPZ_Line1", "Cefoperazone_CPZ_Line2", "Cefoperazone_CPZ_Line3", "Cefoperazone_CPZ_Line4",
  "Cefixime_CFIX_Line1", "Cefixime_CFIX_Line2", "Cefixime_CFIX_Line3", "Cefixime_CFIX_Line4",
  "Amikacin_AMK_Line1", "Amikacin_AMK_Line2", "Amikacin_AMK_Line3", "Amikacin_AMK_Line4",
  "Neomycin_NM_Line1", "Neomycin_NM_Line2", "Neomycin_NM_Line3", "Neomycin_NM_Line4",
  "Doxycycline_DOXY_Line1", "Doxycycline_DOXY_Line2", "Doxycycline_DOXY_Line3", "Doxycycline_DOXY_Line4",
  "Chloramphenicol_CP_Line1", "Chloramphenicol_CP_Line2", "Chloramphenicol_CP_Line3", "Chloramphenicol_CP_Line4",
  "Azithromycin_AZM_Line1", "Azithromycin_AZM_Line2", "Azithromycin_AZM_Line3", "Azithromycin_AZM_Line4",
  "Trimethoprim_TP_Line1", "Trimethoprim_TP_Line2", "Trimethoprim_TP_Line3", "Trimethoprim_TP_Line4",
  "Enoxacin_ENX_Line1", "Enoxacin_ENX_Line2", "Enoxacin_ENX_Line3", "Enoxacin_ENX_Line4",
  "Ciprofloxacin_CPFX_Line1", "Ciprofloxacin_CPFX_Line2", "Ciprofloxacin_CPFX_Line3", "Ciprofloxacin_CPFX_Line4"
)

# Creating metadata for columns
metadata <- data.frame(
  # SampleID = colnames(expr_matrix),
  SampleName = sample_names,
  IsResistant = c("No", "No", rep("Yes", 40)),
  ResistanceType = c(
    "No", "No", 
    rep("CPZ", 4), rep("CFIX", 4), rep("AMK", 4), rep("NM", 4), rep("DOXY", 4),
    rep("CP", 4), rep("AZM", 4), rep("TP", 4), rep("ENX", 4), rep("CPFX", 4)
  )
)

# Aligning rownames of metadata with column names from expression data
rownames(metadata) <- colnames(expr_matrix)

head(metadata)
```

## Utility Functions

### Pre-processing

```{r}
preprocess_data <- function(expr_matrix, metadata, min_expression = 300, min_sd = 0.5) {
  
  # Remove rows with missing values
  expr_matrix <- na.omit(expr_matrix)  
  
  # Filter low-expression genes
  expr_matrix <- expr_matrix[rowSums(expr_matrix >= min_expression) > 0, ] 
  
  # Log2 transformation
  expr_matrix <- log2(expr_matrix + 1)
  
  # Calculate standard deviation
  gene_sd <- apply(expr_matrix, 1, sd)
  
  # Filter low-variability genes
  expr_matrix <- expr_matrix[gene_sd >= min_sd, ] 
  
  return(expr_matrix)
}
```

### PCA Clustering

```{r}
perform_pca <- function(expr_matrix, metadata, path) {
  
  # scaling data before PCA
  pca <- prcomp(t(expr_matrix), scale. = TRUE)
  
  # using explained variance
  explained_variance <- round((pca$sdev^2 / sum(pca$sdev^2)) * 100, 1)
  pca_data <- as.data.frame(pca$x)
  pca_data$IsResistant <- metadata$IsResistant
  pca_data$ResistanceType <- metadata$ResistanceType
  
  # Plot PCA Results
  pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = IsResistant)) +
    geom_point(size = 3) +
    theme_minimal() +
    labs(
      title = paste0("PCA of Gene Expression Data (", ab, " Resistance)"),
      x = paste0("PC1 (", explained_variance[1], "% variance)"),
      y = paste0("PC2 (", explained_variance[2], "% variance)"),
      color = "Resistance"
    )
  # save plot
  ggsave(
    filename = paste0(path,"/PCA", ".png"),
    plot = pca_plot,
    width = 8, height = 6, dpi = 300
  )
}
```

### Volcano Plot Function

```{r}
create_volcano_plot <- function(tweedie_results, title_prefix, path) {
  
  # Prepare the data for the volcano plot
  tweedie_results$logFC <- tweedie_results$coef
  tweedie_results$negLog10qval <- -log10(tweedie_results$qval)
  
  volcano_plot <- EnhancedVolcano(tweedie_results,
                                  lab = tweedie_results$feature,
                                  title = paste0(title_prefix,' vs No resistance'),
                                  x = 'logFC',
                                  y = 'pval',
                                  xlim = c(-1.5, 1.5),
                                  ylim = c(0, 7),
                                  pCutoff = 0.05,
                                  FCcutoff = 0.25,
                                  pointSize = 3.0,
                                  labSize = 3.0)
  
  # Save the volcano plot
  ggsave(
    filename = paste0(path, "/volcano_plot.png"),
    plot = volcano_plot,
    width = 8, height = 6, dpi = 300
  )
}
```

### Plot Heatmap

Plot heatmap for antibiotic specific DE genes

```{r}
create_heatmap <- function(expr_matrix, significant_genes, title_prefix, path) {
  
  # filter expr_matrix for significant genes
  sig_expr_matrix <- expr_matrix[rownames(expr_matrix) %in% significant_genes, ]
  # Save heatmap as a PNG
  png(filename = paste0(path, "/heatmap.png"), width = 800, height = 600)
  pheatmap(
    sig_expr_matrix,
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    display_numbers = FALSE,
    color = colorRampPalette(c("blue", "white", "red"))(50),
    main = paste0(title_prefix, " Heatmap of Differentially Expressed Genes"),
    fontsize = 8
  )
  dev.off()  # Close the device
}
```

## Differential Gene Expression Analysis

```{r}
antibiotics <- c("CPZ", "CFIX", "AMK", "NM", "DOXY", "CP", "AZM", "TP", "ENX", "CPFX")
results_list <- list()
significant_genes <- list()
```

There are 10 antibiotics strain in the expression data. For each antibiotic strain we extract it's data along with the parent strain (ResistantType: 'No').

For each strain

-   Extract Data

-   Preprocess Data

-   Perform PCA Analysis

-   Run Tweedieverse

-   Create Volcano Plot using DE Genes

-   Create Heatmap for DE genes for each Strain Lines (2 Parent + 4 Antibiotic Resistant)

### Tweedieverse

```{r}
# Loop through each antibiotic
for (ab in antibiotics) {
  
  # Subset data for the current antibiotic
  ab_data <- expr_matrix[, metadata$ResistanceType %in% c('No', ab)]
  ab_metadata <- metadata[metadata$ResistanceType %in% c('No', ab), ]
  
  path = paste0("analysis/", ab)
  
  dir.create(path, recursive = TRUE)
  
  # Preprocess the data
  ab_data <- preprocess_data(ab_data, ab_metadata)
  
  # PCA Analysis
  pca_results <- perform_pca(ab_data, ab_metadata, path)
 
  
  # Run Tweedieverse
  Tweedieverse(
    input_features = as.data.frame(ab_data),
    input_metadata = metadata,
    output = paste0(path, "/tweedieverse/"),
    base_model = "CPLM",
    fixed_effects = 'ResistanceType',
    max_significance = 0.05,
    correction = "BH",
    plot_heatmap = TRUE,
    plot_scatter = TRUE,
    heatmap_first_n = 50
  )
  
  # read results stored by tweedieverse
  tweedie_results <- read.delim(paste0(path,"/tweedieverse/all_results.tsv"), 
                                header = TRUE,
                                sep = '\t')
  
  # Volcano Plot
  create_volcano_plot(tweedie_results, ab, path)
  
  
  # Filter significant genes (q-value < 0.05)
  sig_genes <- tweedie_results$feature[tweedie_results$qval < 0.05]
  
  
  # Heatmap for Significant Genes
  create_heatmap(as.data.frame(ab_data),
                 sig_genes, ab, path)
  
  # Store significant genes and full results for meta-analysis
  significant_genes[[ab]] <- sig_genes
  tweedie_results$Antibiotic <- ab
  results_list[[ab]] <- tweedie_results
}
```

```{r}
results_list
```

```{r}
significant_genes
```

#### Save combined results

```{r}
# Merge results into a single data frame and save
combined_results <- bind_rows(results_list)


top_genes <- combined_results %>%
  filter(qval < 0.05) %>%
  group_by(Antibiotic) %>%
  arrange(qval) %>%
  slice_head(n = 20) %>%
  dplyr::select(Antibiotic, feature, coef, pval, qval)

dir.create('analysis/summary/')

write.csv(combined_results, file.path('analysis/summary', "aggregated_results.csv"), row.names = FALSE)
write.csv(top_genes, file.path('analysis/summary', "top_genes.csv"), row.names = FALSE)
```

```{r}
top_genes
```

### Meta-analysis on combined results

```{r}
summary_dir = 'analysis/summary'
```

#### Heatmap

```{r}
# Create a Heatmap of Top Genes
heatmap_data <- top_genes %>%
  dplyr::select(feature, Antibiotic, coef) %>%
  pivot_wider(names_from = Antibiotic, values_from = coef, values_fill = 0)

# Remove 'feature' column and add as rowname
heatmap_matrix <- as.matrix(heatmap_data[, -1])  
rownames(heatmap_matrix) <- heatmap_data$feature
```

```{r}
# Generate heatmap
png(file.path(summary_dir, "heatmap_top_genes.png"), width = 800, height = 800)
pheatmap(
  heatmap_matrix,
  cluster_rows = TRUE,
  cluster_cols = FALSE,
  show_rownames = TRUE,
  color = brewer.pal(6, "YlOrRd"), #colorRampPalette(c("blue", "white", "red"))(50),
  main = "Heatmap of Coefficients for Top Differentially Expressed Genes",
  fontsize = 8,
  scale = "row",
  height = 20
)
dev.off()
```

#### Barplot

```{r}
ggplot(top_genes, aes(x=reorder(feature, coef), y=coef, fill = coef>0))+
  geom_bar(stat = "identity")+
  scale_fill_manual(values = c("TRUE" = "steelblue", "FALSE" = "firebrick"))+
  coord_flip() +
  facet_wrap(~ Antibiotic, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "DEGs",
    x = "Genes",
    y = "Coefficient"
  )
```

```{r}
shared_genes <- Reduce(intersect, significant_genes)
shared_genes
```

```{top_shared_genes <- top_genes %>%}
  filter(feature %in% c("yjiY","hsdR","yagG","ydbD","yagF"))
```

```{r}
bar_plots <- ggplot(top_shared_genes, aes(x=reorder(feature, coef), y=coef, fill = coef>0))+
  geom_bar(stat = "identity")+
  scale_fill_manual(values = c("TRUE" = "steelblue", "FALSE" = "firebrick"))+
  coord_flip() +
  facet_wrap(~ Antibiotic, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Shared DEGs accross Antibiotics",
    x = "Genes",
    y = "Coefficient"
  )
ggsave(
    filename = "analysis/summary/DEG_bar_plot.png",
    plot = bar_plots,
    width = 8, height = 6, dpi = 300
  )
```

#### Upset plot

```{r}
# Create a binary membership matrix
gene_list <- unique(unlist(significant_genes))  # All unique significant genes
binary_matrix <- sapply(significant_genes, function(gene_set) {
  gene_list %in% gene_set
})
rownames(binary_matrix) <- gene_list
colnames(binary_matrix) <- antibiotics

binary_df <- as.data.frame(binary_matrix)
binary_df$Gene <- rownames(binary_matrix)
```

```{r}
upset_plot <- upset(
  binary_df,
  antibiotics,
  name = "Antibiotics",
  #min_size = 2,  # Minimum size of intersections to display
  width_ratio = 0.2,  # Adjust ratios if needed
  height_ratio = 0.8
)
# Save the plot
ggsave(
  filename = "analysis/summary/upset_plot.png",
  plot = upset_plot,
  width = 10, height = 6, dpi = 300
)
```

## Pathway Enrichment Analysis

```{r}

```
